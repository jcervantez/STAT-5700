mutate(education = case_when(
education %in% c("Other", "select one") ~ NA_character_,
TRUE ~ education
))
## income
# table(d0$income) # good
## sirius
# table(d0$sirius) # good
## wharton
# table(d0$wharton) # good
## worktime
# table(d0$worktime) # good
summarize_data <- function(df) {
for (column_name in names(df)) {
data <- df[[column_name]]
cat("\n\nSummary for column:", column_name, "\n")
if (is.numeric(data)) {
# Numeric summary
summary_stats <- summary(data)
print(summary_stats)
# Histogram using ggplot2
p <- ggplot(df, aes(x = .data[[column_name]])) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = paste("Histogram of", column_name), x = column_name, y = "Count")+
theme(legend.position = "none")
# Handling NA values explicitly
if (any(is.na(data))) {
p <- p + geom_histogram(data = df[!is.na(df[[column_name]]), ], aes(x = .data[[column_name]]))
}
} else if (is.factor(data) || is.character(data)) {
# Categorical summary
cat_table <- data.frame(table(data))
total <- sum(cat_table$Freq)
cat_table$Perc <- (cat_table$Freq / total) * 100
# Find the maximum frequency to adjust ylim
max_freq <- max(cat_table$Freq)
# Bar Plot using ggplot2
p <- ggplot(cat_table, aes(x = data, y = Freq, fill = data)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", Perc)), vjust = -0.5, size = 7, position = position_stack(vjust = 1)) +
labs(title = paste("Bar Plot of", column_name), x = column_name, y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, max_freq * 1.2)+  # Increase ylim by 20%
theme(legend.position = "none")
}
print(p)
}
}
# Define the mapping from old to new names so it can fit in the graph
education_mapping <- c(
"Bachelor’s degree or other 4-year degree" = "Bachelors",
"Some college, no diploma; or Associate’s degree" = "Some College",
"Graduate or professional degree" = "Graduate",
"High school graduate (or equivalent)" = "High school",
"Less than 12 years; no high school diploma" = "Less than High School"
)
# Replace the values in the dataframe
d0$education <- factor(education_mapping[d0$education])
summarize_data(d0)
d0 <- d0 |>
mutate(age = case_when(
age == "27`" ~ "27",                   # Change '27`' to '27'
age == "Eighteen (18)" ~ "18",         # Change 'Eighteen (18)' to '18'
TRUE ~ age                             # Set all other values to age
),
age = as.numeric(age),                   # Convert age to numeric
age = case_when(
age > 100 & age < 18 ~ NA_real_,                  # Replace age > 100 with NA
TRUE ~ age                             # Keep all other ages as they are
))
d0 <- read.csv('data/Survey_results_final.csv', header = T) |>
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) |>
rename(age = Answer.Age,
gender = Answer.Gender,
education = Answer.Education,
income = Answer.HouseHoldIncome,
sirius = Answer.Sirius.Radio,
wharton = Answer.Wharton.Radio,
worktime = WorkTimeInSeconds)
names(d0)
d0 <- d0 |>
mutate(age = case_when(
age == "27`" ~ "27",                   # Change '27`' to '27'
age == "Eighteen (18)" ~ "18",         # Change 'Eighteen (18)' to '18'
TRUE ~ age                             # Set all other values to age
),
age = as.numeric(age),                   # Convert age to numeric
age = case_when(
age > 100 & age < 18 ~ NA_real_,                  # Replace age > 100 with NA
TRUE ~ age                             # Keep all other ages as they are
))
table(d0$age)
d0 <- read.csv('data/Survey_results_final.csv', header = T) |>
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) |>
rename(age = Answer.Age,
gender = Answer.Gender,
education = Answer.Education,
income = Answer.HouseHoldIncome,
sirius = Answer.Sirius.Radio,
wharton = Answer.Wharton.Radio,
worktime = WorkTimeInSeconds)
names(d0)
## assign NA for empty strings
d0 <- d0 %>%
mutate(across(where(is.character), ~na_if(., "")))
## age
#table(d0$age)
d0 <- d0 |>
mutate(age = case_when(
age == "27`" ~ "27",                   # Change '27`' to '27'
age == "Eighteen (18)" ~ "18",         # Change 'Eighteen (18)' to '18'
TRUE ~ age                             # Set all other values to age
),
age = as.numeric(age),                   # Convert age to numeric
age = case_when(
age > 100 & age < 18 ~ NA_real_,                  # Replace age > 100 with NA
TRUE ~ age                             # Keep all other ages as they are
))
## gender
# table(d0$gender) # good
## education
# table(d0$education)
d0 <- d0 |>
mutate(education = case_when(
education %in% c("Other", "select one") ~ NA_character_,
TRUE ~ education
))
## income
# table(d0$income) # good
## sirius
# table(d0$sirius) # good
## wharton
# table(d0$wharton) # good
## worktime
# table(d0$worktime) # good
## age
table(d0$age)
d0 <- read.csv('data/Survey_results_final.csv', header = T) |>
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) |>
rename(age = Answer.Age,
gender = Answer.Gender,
education = Answer.Education,
income = Answer.HouseHoldIncome,
sirius = Answer.Sirius.Radio,
wharton = Answer.Wharton.Radio,
worktime = WorkTimeInSeconds)
names(d0)
d0 <- d0 |>
mutate(age = case_when(
age == "27`" ~ "27",                   # Change '27`' to '27'
age == "Eighteen (18)" ~ "18",         # Change 'Eighteen (18)' to '18'
TRUE ~ age                             # Set all other values to age
)),
d0 <- d0 |>
mutate(age = case_when(
age == "27`" ~ "27",                   # Change '27`' to '27'
age == "Eighteen (18)" ~ "18",         # Change 'Eighteen (18)' to '18'
TRUE ~ age                             # Set all other values to age
)) |>
mutate(age = as.numeric(age),                   # Convert age to numeric
age = case_when(
age > 100 & age < 18 ~ NA_real_,                  # Replace age > 100 with NA
TRUE ~ age                             # Keep all other ages as they are
))
table(d0$age)
d0 <- read.csv('data/Survey_results_final.csv', header = T) |>
select(Answer.Age, Answer.Gender, Answer.Education, Answer.HouseHoldIncome, Answer.Sirius.Radio, Answer.Wharton.Radio, WorkTimeInSeconds) |>
rename(age = Answer.Age,
gender = Answer.Gender,
education = Answer.Education,
income = Answer.HouseHoldIncome,
sirius = Answer.Sirius.Radio,
wharton = Answer.Wharton.Radio,
worktime = WorkTimeInSeconds)
names(d0)
## assign NA for empty strings
d0 <- d0 %>%
mutate(across(where(is.character), ~na_if(., "")))
## age
#table(d0$age)
d0 <- d0 |>
mutate(age = case_when(
age == "27`" ~ "27",                   # Change '27`' to '27'
age == "Eighteen (18)" ~ "18",         # Change 'Eighteen (18)' to '18'
TRUE ~ age                             # Set all other values to age
)) |>
mutate(age = as.numeric(age),                   # Convert age to numeric
age = case_when(
age > 100 | age < 18 ~ NA_real_,                  # Replace age > 100 with NA
TRUE ~ age                             # Keep all other ages as they are
))
## gender
# table(d0$gender) # good
## education
# table(d0$education)
d0 <- d0 |>
mutate(education = case_when(
education %in% c("Other", "select one") ~ NA_character_,
TRUE ~ education
))
## income
# table(d0$income) # good
## sirius
# table(d0$sirius) # good
## wharton
# table(d0$wharton) # good
## worktime
# table(d0$worktime) # good
table(d0$age)
summarize_data <- function(df) {
for (column_name in names(df)) {
data <- df[[column_name]]
cat("\n\nSummary for column:", column_name, "\n")
if (is.numeric(data)) {
# Numeric summary
summary_stats <- summary(data)
print(summary_stats)
# Histogram using ggplot2
p <- ggplot(df, aes(x = .data[[column_name]])) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
labs(title = paste("Histogram of", column_name), x = column_name, y = "Count")+
theme(legend.position = "none")
# Handling NA values explicitly
if (any(is.na(data))) {
p <- p + geom_histogram(data = df[!is.na(df[[column_name]]), ], aes(x = .data[[column_name]]))
}
} else if (is.factor(data) || is.character(data)) {
# Categorical summary
cat_table <- data.frame(table(data))
total <- sum(cat_table$Freq)
cat_table$Perc <- (cat_table$Freq / total) * 100
# Find the maximum frequency to adjust ylim
max_freq <- max(cat_table$Freq)
# Bar Plot using ggplot2
p <- ggplot(cat_table, aes(x = data, y = Freq, fill = data)) +
geom_bar(stat = "identity") +
geom_text(aes(label = sprintf("%.1f%%", Perc)), vjust = -0.5, size = 7, position = position_stack(vjust = 1)) +
labs(title = paste("Bar Plot of", column_name), x = column_name, y = "Frequency") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ylim(0, max_freq * 1.2)+  # Increase ylim by 20%
theme(legend.position = "none")
}
print(p)
}
}
# Define the mapping from old to new names so it can fit in the graph
education_mapping <- c(
"Bachelor’s degree or other 4-year degree" = "Bachelors",
"Some college, no diploma; or Associate’s degree" = "Some College",
"Graduate or professional degree" = "Graduate",
"High school graduate (or equivalent)" = "High school",
"Less than 12 years; no high school diploma" = "Less than High School"
)
# Replace the values in the dataframe
d0$education <- factor(education_mapping[d0$education])
summarize_data(d0)
write.csv(d0,'new_data.csv',row.names = F)
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes')
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
)
knitr::kable(summary_table, caption = "Estimation of Wharton Business Radio's Audience Size")
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes', na.rm = T)
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
)
knitr::kable(summary_table, caption = "Estimation of Wharton Business Radio's Audience Size")
View(summary_table)
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes', na.rm = T)
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
) |>
t()
knitr::kable(summary_table, caption = "Estimation of Wharton Business Radio's Audience Size")
knitr::kable(summary_table, caption = "Estimation of Wharton Business Radio's Audience Size")
View(summary_table)
options(scipen=999)
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes', na.rm = T)
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
) |>
t()
knitr::kable(summary_table, caption = "Estimation of Wharton Business Radio's Audience Size")
options(scipen=999)
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes', na.rm = T)
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
) |>
t()
for (i in 1:nrow(transposed_summary_df)) {
if (transposed_summary_df$Attribute[i] == "Estimated_Wharton_Audience") {
cat(paste0("\\textcolor{red}{", transposed_summary_df$Attribute[i], ": ", format(transposed_summary_df$Value[i], big.mark = ","), "}\\newline\n"))
} else {
cat(paste0(transposed_summary_df$Attribute[i], ": ", format(transposed_summary_df$Value[i], big.mark = ","), "\\newline\n"))
}
}
options(scipen=999)
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes', na.rm = T)
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
) |>
t()
for (i in 1:nrow(summary_table)) {
if (summary_table$Attribute[i] == "Estimated_Wharton_Audience") {
cat(paste0("\\textcolor{red}{", summary_table$Attribute[i], ": ", format(summary_table$Value[i], big.mark = ","), "}\\newline\n"))
} else {
cat(paste0(summary_table$Attribute[i], ": ", format(summary_table$Value[i], big.mark = ","), "\\newline\n"))
}
}
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
) |>
t() |>  as.data.frame()
View(summary_table)
options(scipen=999)
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes', na.rm = T)
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
) |>
t() |>  as.data.frame()
for (i in 1:nrow(summary_table)) {
if (summary_table$Attribute[i] == "Estimated_Wharton_Audience") {
cat(paste0("\\textcolor{red}{", summary_table$Attribute[i], ": ", format(summary_table$Value[i], big.mark = ","), "}\\newline\n"))
} else {
cat(paste0(summary_table$Attribute[i], ": ", format(summary_table$Value[i], big.mark = ","), "\\newline\n"))
}
}
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes', na.rm = T)
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
) |>
t() |>  as.data.frame()
# Naming the columns correctly
colnames(summary_table) <- c("Attribute", "Value")
options(scipen=999)
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes', na.rm = T)
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
)
# Transpose the summary table and convert it to a data frame
summary_table <- t(summary_table) %>% as.data.frame()
# Add row names as a new column for Attribute
summary_table <- cbind(Attribute = rownames(summary_table), summary_table)
# Rename the second column to Value
colnames(summary_table)[2] <- "Value"
# Ensure Value is of type numeric for formatting
summary_table$Value <- as.numeric(summary_table$Value)
# Now, your loop should look like this:
for (i in 1:nrow(summary_table)) {
if (summary_table$Attribute[i] == "Estimated_Wharton_Audience") {
cat(paste0("\\textcolor{red}{", summary_table$Attribute[i], ": ", format(summary_table$Value[i], big.mark = ","), "}\\newline\n"))
} else {
cat(paste0(summary_table$Attribute[i], ": ", format(summary_table$Value[i], big.mark = ","), "\\newline\n"))
}
}
options(scipen=999)
# Step 1: Filter respondents who have listened to Sirius Radio
sirius_listeners_df <- d0[d0$sirius == 'Yes', ]
# Step 2: Count the number of respondents who have also listened to the Wharton Business Radio
wharton_listeners_count <- sum(sirius_listeners_df$wharton == 'Yes', na.rm = T)
# Step 3: Calculate the proportion of Wharton listeners among Sirius listeners
proportion_wharton <- wharton_listeners_count / nrow(sirius_listeners_df)
# Step 4: Total Sirius Radio listeners as of May 2014
total_sirius_listeners <- 51600000
# Estimate Wharton Business Radio's audience size
estimated_wharton_audience <- total_sirius_listeners * proportion_wharton
# Create a summary table
summary_table <- data.frame(
Total_Sirius_Listeners = nrow(sirius_listeners_df),
Wharton_Listeners_Count = wharton_listeners_count,
Proportion_Wharton = proportion_wharton,
Estimated_Wharton_Audience = round(estimated_wharton_audience)
)
# Transpose the summary table and convert it to a data frame
summary_table <- t(summary_table) %>% as.data.frame()
# Add row names as a new column for Attribute
summary_table <- cbind(Attribute = rownames(summary_table), summary_table)
# Rename the second column to Value
colnames(summary_table)[2] <- "Value"
# Ensure Value is of type numeric for formatting
summary_table$Value <- as.numeric(summary_table$Value)
# Now, your loop should look like this:
for (i in 1:nrow(summary_table)) {
# Replace underscores with spaces for LaTeX output
attribute_name_latex_safe = gsub("_", " ", summary_table$Attribute[i])
if (summary_table$Attribute[i] == "Estimated_Wharton_Audience") {
cat(paste0("\\textcolor{red}{", attribute_name_latex_safe, ": ", format(summary_table$Value[i], big.mark = ","), "}\\newline\n"))
} else {
cat(paste0(attribute_name_latex_safe, ": ", format(summary_table$Value[i], big.mark = ","), "\\newline\n"))
}
}
